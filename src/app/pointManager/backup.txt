'use client';

import { useState } from 'react';
import {
    Typography, Button, Box, TextField, Select, MenuItem, Table,
    TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Checkbox
} from '@mui/material';
import { useLessonPath } from '@/app/hooks/useLessonPath'

const TOKEN = '7c3afb790462432d924aef3f79a90b22';

export default function LessonPath() {
    const [selectedAssignmentId, setSelectedAssignmentId] = useState('');
    const [fieldText, setFieldText] = useState('');
    const [output, setOutput] = useState({});
    const { assignments, submissions, userMap, assignmentMap } = useLessonPath();

    const readFileUrl = async (url) => {
        try {
            const response = await fetch('/api/getDocUrl', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ fileUrl: url }),
            });
            if (!response.ok) throw new Error('Network response was not ok');
            const data = await response.json();
            return data.text;
        } catch (error) {
            console.error('Error reading file:', error);
        }
    };

    const handleSubmit = async () => {
        try {
            const validSubmissions = submissions.filter(
                s => s.fileurl && s.userid &&
                    (s.filename.endsWith('.doc') || s.filename.endsWith('.docx'))
            );
            const fileUrls = validSubmissions.map(s => s.fileurl);
            const userIds = validSubmissions.map(s => s.userid);
            if (fileUrls.length === 0) return;

            const responses = [];
            for (let i = 0; i < fileUrls.length; i++) {
                const fileDocUrl = await readFileUrl(fileUrls[i] + `?token=${TOKEN}`);
                const prompt = `Nội dung cần chấm:\n${fileDocUrl}\nTheo các yêu cầu như sau: ${fieldText}`;
                const response = await fetch('/api/gemini', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ body: prompt }),
                });
                if (!response.ok) throw new Error('Không có gợi ý từ AI');
                const data = await response.json();
                if (data) responses.push(data);
                await new Promise(resolve => setTimeout(resolve, Math.random() * 3000 + 7000));
            }

            responses.forEach((data, index) => {
                const result = data.output || 'Không có gợi ý từ AI';
                setOutput(prev => ({ ...prev, [userIds[index]]: result }));
            });
        } catch (error) {
            console.error(error);
        }
    };

    const renderTable = (filteredSubmissions) => {
        return filteredSubmissions.map(submission => {
            if (submission.filename.endsWith('.docx') || submission.filename.endsWith('.doc')) {
                const { fileurl, filename, userid, assignmentid } = submission;
                const userInfo = userMap[userid] || {};
                const assignmentName = assignmentMap[assignmentid] || '';
                return (
                    <TableRow key={`${userid}-${assignmentid}`}>
                        <TableCell><Checkbox /></TableCell>
                        <TableCell>{`${userInfo.firstname || ''} ${userInfo.lastname || ''}`}</TableCell>
                        <TableCell>{userInfo.email || ''}</TableCell>
                        <TableCell>{assignmentName}</TableCell>
                        <TableCell><a href={`${fileurl}?token=${TOKEN}`} target="_blank" rel="noopener noreferrer">{filename}</a></TableCell>
                        <TableCell>
                            <TextField
                                variant="outlined"
                                fullWidth
                                multiline
                                rows={3}
                                sx={{ width: '300px' }}
                                value={output[userid] || ''}
                            />
                        </TableCell>
                    </TableRow>
                );
            }
            return null;
        });
    };

    return (
        <>
            {/* Input tiêu chí + nút chấm điểm */}

            <Box sx={{ backgroundColor: 'white', borderRadius: 2, p: 2, boxShadow: 2, mt: 4, mx: 'auto', display: 'flex' }}>
                <Box sx={{ display: 'flex', flexDirection: 'column' }}>
                    <TextField
                        label="Nhập tiêu chí"
                        variant="outlined"
                        fullWidth
                        multiline
                        rows={14}
                        sx={{ mb: 2, width: '500px' }}
                        value={fieldText}
                        onChange={(e) => setFieldText(e.target.value)}
                    />
                    <Button variant="contained" color="primary" onClick={handleSubmit}>
                        Chấm điểm
                    </Button>
                </Box>

            </Box>
            <Box>
                {/* Các thẻ chức năng */}
                <div style={{ display: 'flex', gap: '16px', marginBottom: '32px' }}>
                    <div
                        onClick={() => setShowDialog(true)}
                        style={{ flex: 1, padding: '16px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '8px', cursor: 'pointer' }}
                    >
                        <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>Tải tài liệu</h2>
                        <p style={{ fontSize: '14px', color: '#555' }}>
                            Giáo viên có thể chia sẻ bài giảng hoặc học liệu với học sinh
                        </p>
                    </div>
                    <div style={{ flex: 1, padding: '16px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '8px' }}>
                        <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>Hướng dẫn lớp</h2>
                        <p style={{ fontSize: '14px', color: '#555' }}>
                            Thiết lập quy tắc, nội dung hướng dẫn cho từng tiết học
                        </p>
                    </div>
                </div>
            </Box>

            {/* Chọn bài tập */}
            <Box sx={{ backgroundColor: 'white', borderRadius: 2, p: 2, boxShadow: 2, mt: 4, mx: 'auto' }}>
                <Box sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>
                    <Typography variant="h6" sx={{ mr: 1 }}>Chọn bài tập:</Typography>
                    <Select
                        value={selectedAssignmentId}
                        onChange={(e) => setSelectedAssignmentId(e.target.value)}
                        displayEmpty
                        sx={{ width: '300px', height: '40px' }}
                    >
                        <MenuItem value="">Tất cả</MenuItem>
                        {assignments.map(assignment => (
                            <MenuItem key={assignment.id} value={assignment.id}>
                                {assignment.name}
                            </MenuItem>
                        ))}
                    </Select>
                </Box>

                {/* Bảng danh sách sinh viên và nhận xét */}
                <TableContainer component={Paper}>
                    <Table>
                        <TableHead>
                            <TableRow>
                                <TableCell><Checkbox /></TableCell>
                                <TableCell>TÊN SINH VIÊN</TableCell>
                                <TableCell>EMAIL</TableCell>
                                <TableCell>BÀI TẬP</TableCell>
                                <TableCell>FILE</TableCell>
                                <TableCell>NHẬN XÉT</TableCell>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {renderTable(
                                submissions.filter(s =>
                                    selectedAssignmentId ? s.assignmentid == selectedAssignmentId : true
                                )
                            )}
                        </TableBody>
                    </Table>
                </TableContainer>
            </Box>
        </>
    );
}
