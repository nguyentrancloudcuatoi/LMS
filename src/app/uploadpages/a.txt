'use client';

import { useState, useRef } from 'react';

export default function ClassroomManagerPage() {
  const [search, setSearch] = useState('');
  const [showDialog, setShowDialog] = useState(false);
  const [uploadedFile, setUploadedFile] = useState(null);
  const [uploading, setUploading] = useState(false);
  const fileInputRef = useRef();

  // Danh s√°ch l·ªõp h·ªçc
  const classList = [
    { name: 'Training AI trainers 2', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'Training AI trainers 1', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'CHUY√äN ƒê·ªÄ', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'Scatch', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'IOT', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'Micro:Bit - Python', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'K·ªπ thu·∫≠t l·∫≠p tr√¨nh - Python', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'Th√¥ng tin n·ªôi b·ªô - AIR', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'AI Smart Life - 2', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'AI smart life - 1', status: 'ƒêang ho·∫°t ƒë·ªông' },
    { name: 'AI Magic World', status: 'ƒêang ho·∫°t ƒë·ªông' },
  ];

  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setUploading(true);
    const formData = new FormData();
    formData.append('file', file);

    try {
      const response = await fetch('https://your-gemini-api/upload', {
        method: 'POST',
        body: formData,
      });
      const result = await response.json();
      console.log('Gemini response:', result);
      setUploadedFile(file);
    } catch (err) {
      console.error('Upload error:', err);
    }

    setUploading(false);
  };

  return (
    <>
      <div style={{ backgroundColor: 'white', borderRadius: '12px', padding: '16px', boxShadow: '0 0 10px rgba(0,0,0,0.1)', marginTop: '32px', minWidth: '90%', width: 'calc(100% - 70px)', marginInline: 'auto', marginLeft: '20px', fontFamily: 'Arial, sans-serif' }}>
        <h1 style={{ fontSize: '24px', fontWeight: 'bold', marginBottom: '16px' }}>Qu·∫£n l√Ω l·ªõp h·ªçc</h1>

        {/* Thanh t√¨m ki·∫øm */}
        <div style={{ display: 'flex', alignItems: 'center', gap: '12px', marginBottom: '24px' }}>
          <input
            type="text"
            placeholder="T√¨m ki·∫øm l·ªõp h·ªçc"
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            style={{ flex: 1, padding: '8px 12px', border: '1px solid #ccc', borderRadius: '6px', fontSize: '14px' }}
          />
          <button style={{ padding: '8px 16px', backgroundColor: '#e0e0e0', border: 'none', borderRadius: '6px', cursor: 'pointer' }}>
            üîç T√¨m ki·∫øm
          </button>
        </div>

        {/* C√°c th·∫ª ch·ª©c nƒÉng */}
        <div style={{ display: 'flex', gap: '16px', marginBottom: '32px' }}>
          <div
            onClick={() => setShowDialog(true)}
            style={{ flex: 1, padding: '16px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '8px', cursor: 'pointer' }}
          >
            <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>T·∫£i t√†i li·ªáu</h2>
            <p style={{ fontSize: '14px', color: '#555' }}>
              Gi√°o vi√™n c√≥ th·ªÉ chia s·∫ª b√†i gi·∫£ng ho·∫∑c h·ªçc li·ªáu v·ªõi h·ªçc sinh
            </p>
          </div>
          <div style={{ flex: 1, padding: '16px', backgroundColor: '#f9f9f9', border: '1px solid #ddd', borderRadius: '8px' }}>
            <h2 style={{ fontSize: '16px', marginBottom: '8px' }}>H∆∞·ªõng d·∫´n l·ªõp</h2>
            <p style={{ fontSize: '14px', color: '#555' }}>
              Thi·∫øt l·∫≠p quy t·∫Øc, n·ªôi dung h∆∞·ªõng d·∫´n cho t·ª´ng ti·∫øt h·ªçc
            </p>
          </div>
        </div>

        {/* Danh s√°ch l·ªõp h·ªçc */}
        <div style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
          {classList
            .filter((cls) => cls.name.toLowerCase().includes(search.toLowerCase()))
            .map((cls, index) => (
              <div
                key={index}
                style={{ border: '1px solid #ddd', padding: '12px', borderRadius: '6px', cursor: 'pointer', transition: 'background 0.3s' }}
                onMouseEnter={(e) => (e.currentTarget.style.backgroundColor = '#f5f5f5')}
                onMouseLeave={(e) => (e.currentTarget.style.backgroundColor = 'white')}
              >
                <h3 style={{ margin: '0 0 4px', fontSize: '15px' }}>{cls.name}</h3>
                <p style={{ margin: 0, fontSize: '13px', color: cls.status === 'ƒêang ho·∫°t ƒë·ªông' ? '#2e7d32' : '#d32f2f' }}>
                  Tr·∫°ng th√°i: {cls.status}
                </p>
              </div>
            ))}
        </div>
      </div>

      {/* DIALOG t·∫£i t√†i li·ªáu */}
      {showDialog && (
        <div onClick={() => setShowDialog(false)} style={{ position: 'fixed', inset: 0, backgroundColor: 'rgba(0,0,0,0.4)', display: 'flex', justifyContent: 'center', alignItems: 'center', zIndex: 999 }}>
          <div onClick={(e) => e.stopPropagation()} style={{ background: 'white', borderRadius: '20px', width: '500px', padding: '24px', position: 'relative', boxShadow: '0 0 20px rgba(0,0,0,0.2)' }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '20px' }}>
              <h2 style={{ fontSize: '18px', fontWeight: 'bold' }}>T·ªáp d·ª± √°n</h2>
              <button onClick={() => fileInputRef.current.click()} style={{ padding: '6px 14px', borderRadius: '999px', backgroundColor: '#f0f0f0', border: '1px solid #ddd', cursor: 'pointer', fontWeight: 'bold' }}>
                {uploading ? 'ƒêang t·∫£i...' : 'Th√™m t·ªáp'}
              </button>
              <input type="file" ref={fileInputRef} onChange={handleFileUpload} style={{ display: 'none' }} />
            </div>

            {uploadedFile && (
              <div style={{ border: '1px solid #eee', padding: '12px', borderRadius: '12px', display: 'flex', alignItems: 'center', gap: '12px' }}>
                <div style={{ backgroundColor: '#ff5ca2', borderRadius: '12px', color: 'white', fontWeight: 'bold', padding: '8px', fontSize: '14px', minWidth: '40px', textAlign: 'center' }}>
                  PDF
                </div>
                <div>
                  <p style={{ margin: 0, fontSize: '14px' }}>{uploadedFile.name}</p>
                  <p style={{ margin: 0, fontSize: '12px', color: '#999' }}>{uploadedFile.type.toUpperCase()}</p>
                </div>
              </div>
            )}

            <button onClick={() => setShowDialog(false)} style={{ position: 'absolute', top: '10px', right: '16px', fontSize: '20px', border: 'none', background: 'transparent', cursor: 'pointer' }}>√ó</button>
          </div>
        </div>
      )}
    </>
  );
}
